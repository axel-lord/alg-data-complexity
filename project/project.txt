Members:
Axel Lord

Contributions:
Axel Lord, everything

Algorithm:
  header: map_bfs.h
  implementation: map_bfs.c
Graph/Map:
  header: map.h
  implementation: map.c
File loading:
  header: load_map.h
  implementation: load_map.c

Various strcutures and functions used by above:
position.h, position.c
  Structs and functions to handle positions
  such as stacks and queues as well as building
  a path from the output given by map_grid_bfs
string_queue.h, string_queue.c
  struct and functions to handle
  a queue of strings, used as output of file loading
  and input of graph/map creation

Main:
find_path.c
  parses command line arguments,
  creates objects and runs
  the algorithms in desired order

Compilation:
  use either the CMakeLists.txt file with cmake, then make 
  or compile using:
gcc -std=c11 -Wall -Wextra -g -O0 -o find_path_list find_path.c map.c string_queue.c position.c load_map.c map_bfs.c

Test:
  run the find_path_list executable with the 
  file as the first argument and then
  source x, source y, goal x, goal y

  coordinates start at 0
Ex: (the map in the project pdf)
Run:
./find_path_list test_pdf.txt 1 1 6 1

Output:
(1,1)->(0,1)->(0,2)->(0,3)->(0,4)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(1,9)->(2,9)->(3,9)->(4,9)->(5,9)->(5,8
)->(5,7)->(5,6)->(5,5)->(6,5)->(7,5)->(8,5)->(9,5)->(9,4)->(9,3)->(8,3)->(7,3)->(6,3)->(6,2)->(6,1)

Run:
./find_path_list test_maze_1.txt 34 0 0 22

Output:
(34,0)->(34,1)->(34,2)->(34,3)->(34,4)->(34,5)->(34,6)->(34,7)->(34,8)->(34,9)->(33,9)->(32,9)->(31,9)->(30,9)->(30,8)->(30,7)->(31,7)->(32,7)->(32,6)->(32,5)->(31,5)->(30,5)->(29,5)->(28,5)->(28,4)->(28,3)->(28,2)->(28,1)->(27,1)->(26,1)->(25,1)->(24,1)->(24,2)->(24,3)->(24,4)->(24,5)->(24,6)->(24,7)->(25,7)->(26,7)->(27,7)->(28,7)->(28,8)->(28,9)->(28,10)->(28,11)->(29,11)->(30,11)->(30,12)->(30,13)->(31,13)->(32,13)->(33,13)->(34,13)->(34,14)->(34,15)->(34,16)->(34,17)->(33,17)->(32,17)->(32,16)->(32,15)->(31,15)->(30,15)->(29,15)->(28,15)->(27,15)->(26,15)->(26,14)->(26,13)->(26,12)->(26,11)->(26,10)->(26,9)->(25,9)->(24,9)->(23,9)->(22,9)->(22,10)->(22,11)->(21,11)->(20,11)->(20,12)->(20,13)->(21,13)->(22,13)->(22,14)->(22,15)->(22,16)->(22,17)->(23,17)->(24,17)->(25,17)->(26,17)->(27,17)->(28,17)->(28,18)->(28,19)->(29,19)->(30,19)->(31,19)->(32,19)->(32,20)->(32,21)->(31,21)->(30,21)->(29,21)->(28,21)->(27,21)->(26,21)->(26,20)->(26,19)->(25,19)->(24,19)->(24,20)->(24,21)->(23,21)->(22,21)->(21,21)->(20,21)->(20,20)->(20,19)->(19,19)->(18,19)->(17,19)->(16,19)->(16,18)->(16,17)->(17,17)->(18,17)->(19,17)->(20,17)->(20,16)->(20,15)->(19,15)->(18,15)->(18,14)->(18,13)->(18,12)->(18,11)->(17,11)->(16,11)->(16,10)->(16,9)->(16,8)->(16,7)->(15,7)->(14,7)->(14,6)->(14,5)->(15,5)->(16,5)->(17,5)->(18,5)->(18,4)->(18,3)->(17,3)->(16,3)->(15,3)->(14,3)->(14,2)->(14,1)->(13,1)->(12,1)->(11,1)->(10,1)->(10,2)->(10,3)->(9,3)->(8,3)->(8,2)->(8,1)->(7,1)->(6,1)->(5,1)->(4,1)->(3,1)->(2,1)->(2,2)->(2,3)->(3,3)->(4,3)->(5,3)->(6,3)->(6,4)->(6,5)->(7,5)->(8,5)->(9,5)->(10,5)->(11,5)->(12,5)->(12,6)->(12,7)->(12,8)->(12,9)->(13,9)->(14,9)->(14,10)->(14,11)->(13,11)->(12,11)->(12,12)->(12,13)->(11,13)->(10,13)->(9,13)->(8,13)->(8,12)->(8,11)->(8,10)->(8,9)->(8,8)->(8,7)->(7,7)->(6,7)->(5,7)->(4,7)->(3,7)->(2,7)->(2,6)->(2,5)->(1,5)->(0,5)->(0,6)->(0,7)->(0,8)->(0,9)->(1,9)->(2,9)->(3,9)->(4,9)->(4,10)->(4,11)->(5,11)->(6,11)->(6,12)->(6,13)->(6,14)->(6,15)->(7,15)->(8,15)->(9,15)->(10,15)->(10,16)->(10,17)->(10,18)->(10,19)->(10,20)->(10,21)->(9,21)->(8,21)->(7,21)->(6,21)->(6,20)->(6,19)->(6,18)->(6,17)->(5,17)->(4,17)->(3,17)->(2,17)->(2,16)->(2,15)->(3,15)->(4,15)->(4,14)->(4,13)->(3,13)->(2,13)->(1,13)->(0,13)->(0,14)->(0,15)->(0,16)->(0,17)->(0,18)->(0,19)->(0,20)->(0,21)->(0,22)

Run:
./find_path_list test_maze_2.txt 14 0 22 52

Output:
(14,0)->(14,1)->(14,2)->(14,3)->(15,3)->(16,3)->(16,4)->(16,5)->(17,5)->(18,5)->(19,5)->(20,5)->(20,6)->(20,7)->(19,7)->(18,7)->(17,7)->(16,7)->(15,7)->(14,7)->(14,6)->(14,5)->(13,5)->(12,5)->(12,6)->(12,7)->(11,7)->(10,7)->(10,8)->(10,9)->(9,9)->(8,9)->(8,10)->(8,11)->(8,12)->(8,13)->(8,14)->(8,15)->(9,15)->(10,15)->(11,15)->(12,15)->(12,16)->(12,17)->(11,17)->(10,17)->(10,18)->(10,19)->(11,19)->(12,19)->(13,19)->(14,19)->(15,19)->(16,19)->(16,20)->(16,21)->(15,21)->(14,21)->(14,22)->(14,23)->(15,23)->(16,23)->(17,23)->(18,23)->(18,24)->(18,25)->(17,25)->(16,25)->(16,26)->(16,27)->(15,27)->(14,27)->(14,26)->(14,25)->(13,25)->(12,25)->(12,26)->(12,27)->(12,28)->(12,29)->(13,29)->(14,29)->(15,29)->(16,29)->(17,29)->(18,29)->(18,28)->(18,27)->(19,27)->(20,27)->(20,28)->(20,29)->(20,30)->(20,31)->(21,31)->(22,31)->(22,32)->(22,33)->(22,34)->(22,35)->(21,35)->(20,35)->(20,36)->(20,37)->(19,37)->(18,37)->(18,38)->(18,39)->(18,40)->(18,41)->(19,41)->(20,41)->(21,41)->(22,41)->(23,41)->(24,41)->(24,40)->(24,39)->(23,39)->(22,39)->(22,38)->(22,37)->(23,37)->(24,37)->(24,36)->(24,35)->(25,35)->(26,35)->(26,36)->(26,37)->(27,37)->(28,37)->(28,38)->(28,39)->(27,39)->(26,39)->(26,40)->(26,41)->(26,42)->(26,43)->(26,44)->(26,45)->(26,46)->(26,47)->(26,48)->(26,49)->(26,50)->(26,51)->(25,51)->(24,51)->(23,51)->(22,51)->(22,52)

Run:
./find_path_list test_wall.txt 0 2 6 2

Output:
NULL

If the cmake file is used or the program is compiled with:

gcc -std=c11 -Wall -Wextra -g -O0 -DPROJECT_PRINT_AS_MAP -o find_path_map find_path.c map.c string_queue.c position.c load_map.c map_bfs.c

and find_path_map is ran instead of find_path_list
the output will be drawn as a 2d image with characters 
in the terminal instead of a list of positions
